import { Directive, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
export class StripeCardGroupDirective {
    stripeElementsService;
    elementsOptions;
    stripe;
    elements = new EventEmitter();
    load = new EventEmitter();
    blur = new EventEmitter();
    change = new EventEmitter();
    focus = new EventEmitter();
    ready = new EventEmitter();
    escape = new EventEmitter();
    _elements;
    state = 'notready';
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        const elementsOptions = this.elementsOptions;
        const stripe = this.stripe;
        if (changes.elementsOptions || changes.stripe || !this._elements) {
            this._elements = await this.stripeElementsService.elements(stripe, elementsOptions).toPromise();
            this.elements.emit(this._elements);
        }
        this.state = 'ready';
    }
    async ngOnInit() {
        if (this.state === 'notready') {
            this.state = 'starting';
            this._elements = await this.stripeElementsService.elements(this.stripe).toPromise();
            this.elements.emit(this._elements);
            this.state = 'ready';
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: StripeCardGroupDirective, deps: [{ token: i1.StripeElementsService }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.1.3", type: StripeCardGroupDirective, isStandalone: true, selector: "ngx-stripe-card-group,[ngxStripeCardGroup]", inputs: { elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { elements: "elements", load: "load", blur: "blur", change: "change", focus: "focus", ready: "ready", escape: "escape" }, usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: StripeCardGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngx-stripe-card-group,[ngxStripeCardGroup]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.StripeElementsService }], propDecorators: { elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], elements: [{
                type: Output
            }], load: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], escape: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1ncm91cC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RyaXBlL3NyYy9saWIvZGlyZWN0aXZlcy9jYXJkLWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBNEJ6RyxNQUFNLE9BQU8sd0JBQXdCO0lBaUJoQjtJQWhCVixlQUFlLENBQWlDO0lBQ2hELE1BQU0sQ0FBeUI7SUFFOUIsUUFBUSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO0lBRTlDLElBQUksR0FBRyxJQUFJLFlBQVksRUFBOEIsQ0FBQztJQUV0RCxJQUFJLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQUNoQyxNQUFNLEdBQUcsSUFBSSxZQUFZLEVBQWlDLENBQUM7SUFDM0QsS0FBSyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFDakMsS0FBSyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFDakMsTUFBTSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFFNUMsU0FBUyxDQUFpQjtJQUMxQixLQUFLLEdBQXNDLFVBQVUsQ0FBQztJQUV0RCxZQUFtQixxQkFBNEM7UUFBNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtJQUFHLENBQUM7SUFFbkUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFzQjtRQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUV4QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFM0IsSUFBSSxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2hFLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNoRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVE7UUFDWixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO1lBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1lBRXhCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNwRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7U0FDdEI7SUFDSCxDQUFDO3VHQTFDVSx3QkFBd0I7MkZBQXhCLHdCQUF3Qjs7MkZBQXhCLHdCQUF3QjtrQkFKcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNENBQTRDO29CQUN0RCxVQUFVLEVBQUUsSUFBSTtpQkFDakI7MEZBRVUsZUFBZTtzQkFBdkIsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUs7Z0JBRUksUUFBUTtzQkFBakIsTUFBTTtnQkFFRyxJQUFJO3NCQUFiLE1BQU07Z0JBRUcsSUFBSTtzQkFBYixNQUFNO2dCQUNHLE1BQU07c0JBQWYsTUFBTTtnQkFDRyxLQUFLO3NCQUFkLE1BQU07Z0JBQ0csS0FBSztzQkFBZCxNQUFNO2dCQUNHLE1BQU07c0JBQWYsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICBTdHJpcGVDYXJkQ3ZjRWxlbWVudCxcbiAgU3RyaXBlQ2FyZEN2Y0VsZW1lbnRDaGFuZ2VFdmVudCxcbiAgU3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnQsXG4gIFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50Q2hhbmdlRXZlbnQsXG4gIFN0cmlwZUNhcmROdW1iZXJFbGVtZW50LFxuICBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudENoYW5nZUV2ZW50LFxuICBTdHJpcGVFbGVtZW50cyxcbiAgU3RyaXBlRWxlbWVudHNPcHRpb25zXG59IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJztcblxuaW1wb3J0IHsgU3RyaXBlU2VydmljZUludGVyZmFjZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvc3RyaXBlLWluc3RhbmNlLmludGVyZmFjZSc7XG5cbmltcG9ydCB7IFN0cmlwZUVsZW1lbnRzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0cmlwZS1lbGVtZW50cy5zZXJ2aWNlJztcblxudHlwZSBOZ3hTdHJpcGVDYXJkR3JvdXBDaGFuZ2VFdmVudCA9XG4gIHwgU3RyaXBlQ2FyZE51bWJlckVsZW1lbnRDaGFuZ2VFdmVudFxuICB8IFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50Q2hhbmdlRXZlbnRcbiAgfCBTdHJpcGVDYXJkQ3ZjRWxlbWVudENoYW5nZUV2ZW50O1xuXG50eXBlIE5neFN0cmlwZUNhcmRHcm91cEVsZW1lbnRzID0gU3RyaXBlQ2FyZE51bWJlckVsZW1lbnQgfCBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudCB8IFN0cmlwZUNhcmRDdmNFbGVtZW50O1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICduZ3gtc3RyaXBlLWNhcmQtZ3JvdXAsW25neFN0cmlwZUNhcmRHcm91cF0nLFxuICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIFN0cmlwZUNhcmRHcm91cERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgZWxlbWVudHNPcHRpb25zOiBQYXJ0aWFsPFN0cmlwZUVsZW1lbnRzT3B0aW9ucz47XG4gIEBJbnB1dCgpIHN0cmlwZTogU3RyaXBlU2VydmljZUludGVyZmFjZTtcblxuICBAT3V0cHV0KCkgZWxlbWVudHMgPSBuZXcgRXZlbnRFbWl0dGVyPFN0cmlwZUVsZW1lbnRzPigpO1xuXG4gIEBPdXRwdXQoKSBsb2FkID0gbmV3IEV2ZW50RW1pdHRlcjxOZ3hTdHJpcGVDYXJkR3JvdXBFbGVtZW50cz4oKTtcblxuICBAT3V0cHV0KCkgYmx1ciA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIGNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Tmd4U3RyaXBlQ2FyZEdyb3VwQ2hhbmdlRXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSBmb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcbiAgQE91dHB1dCgpIHJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuICBAT3V0cHV0KCkgZXNjYXBlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIF9lbGVtZW50czogU3RyaXBlRWxlbWVudHM7XG4gIHN0YXRlOiAnbm90cmVhZHknIHwgJ3N0YXJ0aW5nJyB8ICdyZWFkeScgPSAnbm90cmVhZHknO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdHJpcGVFbGVtZW50c1NlcnZpY2U6IFN0cmlwZUVsZW1lbnRzU2VydmljZSkge31cblxuICBhc3luYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgdGhpcy5zdGF0ZSA9ICdzdGFydGluZyc7XG5cbiAgICBjb25zdCBlbGVtZW50c09wdGlvbnMgPSB0aGlzLmVsZW1lbnRzT3B0aW9ucztcbiAgICBjb25zdCBzdHJpcGUgPSB0aGlzLnN0cmlwZTtcblxuICAgIGlmIChjaGFuZ2VzLmVsZW1lbnRzT3B0aW9ucyB8fCBjaGFuZ2VzLnN0cmlwZSB8fCAhdGhpcy5fZWxlbWVudHMpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnRzID0gYXdhaXQgdGhpcy5zdHJpcGVFbGVtZW50c1NlcnZpY2UuZWxlbWVudHMoc3RyaXBlLCBlbGVtZW50c09wdGlvbnMpLnRvUHJvbWlzZSgpO1xuICAgICAgdGhpcy5lbGVtZW50cy5lbWl0KHRoaXMuX2VsZW1lbnRzKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlID0gJ3JlYWR5JztcbiAgfVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSAnbm90cmVhZHknKSB7XG4gICAgICB0aGlzLnN0YXRlID0gJ3N0YXJ0aW5nJztcblxuICAgICAgdGhpcy5fZWxlbWVudHMgPSBhd2FpdCB0aGlzLnN0cmlwZUVsZW1lbnRzU2VydmljZS5lbGVtZW50cyh0aGlzLnN0cmlwZSkudG9Qcm9taXNlKCk7XG4gICAgICB0aGlzLmVsZW1lbnRzLmVtaXQodGhpcy5fZWxlbWVudHMpO1xuXG4gICAgICB0aGlzLnN0YXRlID0gJ3JlYWR5JztcbiAgICB9XG4gIH1cbn1cbiJdfQ==