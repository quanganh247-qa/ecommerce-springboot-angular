import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
export class StripeElementsDirective {
    stripeElementsService;
    elementsOptions;
    stripe;
    elements = new EventEmitter();
    _elements;
    state = 'notready';
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
    }
    async ngOnChanges(changes) {
        this.state = 'starting';
        const elementsOptions = this.elementsOptions;
        const stripe = this.stripe;
        if (!stripe) {
            this.state = 'notready';
            return;
        }
        if (changes.elementsOptions) {
            if (this._elements) {
                const payload = Object.keys(elementsOptions).reduce((acc, key) => {
                    if (elementsOptions[key] !== changes.elementsOptions.previousValue[key] &&
                        !['fonts', 'loader', 'clientSecret'].includes(key)) {
                        acc[key] = elementsOptions[key];
                    }
                    return acc;
                }, {});
                this._elements.update(payload);
            }
            else {
                this._elements = await this.stripeElementsService.elements(stripe, elementsOptions).toPromise();
                this.elements.emit(this._elements);
                this.state = 'ready';
            }
        }
    }
    async ngOnInit() {
        if (this.state === 'notready') {
            this.state = 'starting';
            this._elements = await this.stripeElementsService.elements(this.stripe).toPromise();
            this.elements.emit(this._elements);
            this.state = 'ready';
        }
    }
    fetchUpdates() {
        if (!this._elements)
            return null;
        return from(this._elements.fetchUpdates());
    }
    update(options) {
        if (!this._elements)
            return null;
        return this._elements.update(options);
    }
    submit() {
        if (!this._elements)
            return null;
        return from(this._elements.submit());
    }
    getElement(elementType) {
        if (!this._elements)
            return null;
        switch (elementType) {
            case 'address':
                return this._elements.getElement('address');
            case 'paymentMethodMessaging':
                return this._elements.getElement('paymentMethodMessaging');
            case 'affirmMessage':
                return this._elements.getElement('affirmMessage');
            case 'afterpayClearpayMessage':
                return this._elements.getElement('afterpayClearpayMessage');
            case 'auBankAccount':
                return this._elements.getElement('auBankAccount');
            case 'card':
                return this._elements.getElement('card');
            case 'cardNumber':
                return this._elements.getElement('cardNumber');
            case 'cardExpiry':
                return this._elements.getElement('cardExpiry');
            case 'cardCvc':
                return this._elements.getElement('cardCvc');
            case 'fpxBank':
                return this._elements.getElement('fpxBank');
            case 'epsBank':
                return this._elements.getElement('epsBank');
            case 'p24Bank':
                return this._elements.getElement('p24Bank');
            case 'iban':
                return this._elements.getElement('iban');
            case 'idealBank':
                return this._elements.getElement('idealBank');
            case 'linkAuthentication':
                return this._elements.getElement('linkAuthentication');
            case 'expressCheckout':
                return this._elements.getElement('expressCheckout');
            case 'payment':
                return this._elements.getElement('payment');
            case 'paymentRequestButton':
                return this._elements.getElement('paymentRequestButton');
            case 'shippingAddress':
                return this._elements.getElement('shippingAddress');
            default:
                return this._elements.getElement(elementType);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: StripeElementsDirective, deps: [{ token: i1.StripeElementsService }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.1.3", type: StripeElementsDirective, isStandalone: true, selector: "ngx-stripe-elements,[ngxStripeElements]", inputs: { elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { elements: "elements" }, usesOnChanges: true, ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: StripeElementsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ngx-stripe-elements,[ngxStripeElements]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i1.StripeElementsService }], propDecorators: { elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], elements: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,