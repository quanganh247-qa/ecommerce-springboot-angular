import { Inject, Injectable } from '@angular/core';
import { NGX_STRIPE_VERSION, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/ngx-stripe.interface';
import { StripeInstance } from './stripe-instance.class';
import * as i0 from "@angular/core";
import * as i1 from "./api-loader.service";
import * as i2 from "./window-ref.service";
export class StripeFactoryService {
    version;
    baseKey;
    baseOptions;
    loader;
    window;
    constructor(version, baseKey, baseOptions, loader, window) {
        this.version = version;
        this.baseKey = baseKey;
        this.baseOptions = baseOptions;
        this.loader = loader;
        this.window = window;
    }
    create(key, options) {
        if (!key && !this.baseKey) {
            throw new Error('No key defined! Either you need to pass it as a parameter or define it when you call NgxStripeModule.forRoot()');
        }
        return new StripeInstance(this.version, this.loader, this.window, key || this.baseKey, options || this.baseOptions);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: StripeFactoryService, deps: [{ token: NGX_STRIPE_VERSION }, { token: STRIPE_PUBLISHABLE_KEY }, { token: STRIPE_OPTIONS }, { token: i1.LazyStripeAPILoader }, { token: i2.WindowRef }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: StripeFactoryService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.1.3", ngImport: i0, type: StripeFactoryService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NGX_STRIPE_VERSION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [STRIPE_PUBLISHABLE_KEY]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [STRIPE_OPTIONS]
                }] }, { type: i1.LazyStripeAPILoader }, { type: i2.WindowRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zdHJpcGUvc3JjL2xpYi9zZXJ2aWNlcy9zdHJpcGUtZmFjdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSW5ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUtoSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7Ozs7QUFHekQsTUFBTSxPQUFPLG9CQUFvQjtJQUVNO0lBQ0k7SUFDUjtJQUN4QjtJQUNBO0lBTFQsWUFDcUMsT0FBZSxFQUNYLE9BQWUsRUFDdkIsV0FBcUMsRUFDN0QsTUFBMkIsRUFDM0IsTUFBaUI7UUFKVyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUN2QixnQkFBVyxHQUFYLFdBQVcsQ0FBMEI7UUFDN0QsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUN2QixDQUFDO0lBRUcsTUFBTSxDQUFDLEdBQVksRUFBRSxPQUFrQztRQUM1RCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUNiLGdIQUFnSCxDQUNqSCxDQUFDO1NBQ0g7UUFFRCxPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEgsQ0FBQzt1R0FqQlUsb0JBQW9CLGtCQUVyQixrQkFBa0IsYUFDbEIsc0JBQXNCLGFBQ3RCLGNBQWM7MkdBSmIsb0JBQW9COzsyRkFBcEIsb0JBQW9CO2tCQURoQyxVQUFVOzswQkFHTixNQUFNOzJCQUFDLGtCQUFrQjs7MEJBQ3pCLE1BQU07MkJBQUMsc0JBQXNCOzswQkFDN0IsTUFBTTsyQkFBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN0cmlwZUNvbnN0cnVjdG9yT3B0aW9ucyB9IGZyb20gJ0BzdHJpcGUvc3RyaXBlLWpzJztcblxuaW1wb3J0IHsgTkdYX1NUUklQRV9WRVJTSU9OLCBTVFJJUEVfT1BUSU9OUywgU1RSSVBFX1BVQkxJU0hBQkxFX0tFWSB9IGZyb20gJy4uL2ludGVyZmFjZXMvbmd4LXN0cmlwZS5pbnRlcmZhY2UnO1xuXG5pbXBvcnQgeyBMYXp5U3RyaXBlQVBJTG9hZGVyIH0gZnJvbSAnLi9hcGktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnLi93aW5kb3ctcmVmLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTdHJpcGVJbnN0YW5jZSB9IGZyb20gJy4vc3RyaXBlLWluc3RhbmNlLmNsYXNzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0cmlwZUZhY3RvcnlTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChOR1hfU1RSSVBFX1ZFUlNJT04pIHB1YmxpYyB2ZXJzaW9uOiBzdHJpbmcsXG4gICAgQEluamVjdChTVFJJUEVfUFVCTElTSEFCTEVfS0VZKSBwdWJsaWMgYmFzZUtleTogc3RyaW5nLFxuICAgIEBJbmplY3QoU1RSSVBFX09QVElPTlMpIHB1YmxpYyBiYXNlT3B0aW9uczogU3RyaXBlQ29uc3RydWN0b3JPcHRpb25zLFxuICAgIHB1YmxpYyBsb2FkZXI6IExhenlTdHJpcGVBUElMb2FkZXIsXG4gICAgcHVibGljIHdpbmRvdzogV2luZG93UmVmXG4gICkge31cblxuICBwdWJsaWMgY3JlYXRlKGtleT86IHN0cmluZywgb3B0aW9ucz86IFN0cmlwZUNvbnN0cnVjdG9yT3B0aW9ucyk6IFN0cmlwZUluc3RhbmNlIHtcbiAgICBpZiAoIWtleSAmJiAhdGhpcy5iYXNlS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdObyBrZXkgZGVmaW5lZCEgRWl0aGVyIHlvdSBuZWVkIHRvIHBhc3MgaXQgYXMgYSBwYXJhbWV0ZXIgb3IgZGVmaW5lIGl0IHdoZW4geW91IGNhbGwgTmd4U3RyaXBlTW9kdWxlLmZvclJvb3QoKSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHJpcGVJbnN0YW5jZSh0aGlzLnZlcnNpb24sIHRoaXMubG9hZGVyLCB0aGlzLndpbmRvdywga2V5IHx8IHRoaXMuYmFzZUtleSwgb3B0aW9ucyB8fCB0aGlzLmJhc2VPcHRpb25zKTtcbiAgfVxufVxuIl19